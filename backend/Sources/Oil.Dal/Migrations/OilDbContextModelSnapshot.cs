// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oil.Dal;

namespace Oil.Dal.Migrations
{
    [DbContext(typeof(OilDbContext))]
    partial class OilDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "ПАО \"Газпром\"",
                            ShortName = "ГПН"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "ПАО \"Лукойл\"",
                            ShortName = "ЛК"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "ПАО \"БашНефть\"",
                            ShortName = "БН"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "ЗАО \"Турсунт\"",
                            ShortName = "ТУР"
                        });
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.Field", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyId = 1L,
                            Name = "Яхлинское м."
                        },
                        new
                        {
                            Id = 2L,
                            CompanyId = 1L,
                            Name = "Тальниковое м."
                        },
                        new
                        {
                            Id = 3L,
                            CompanyId = 1L,
                            Name = "Шушминское м."
                        },
                        new
                        {
                            Id = 4L,
                            CompanyId = 2L,
                            Name = "Тугровское м."
                        },
                        new
                        {
                            Id = 5L,
                            CompanyId = 2L,
                            Name = "Шаимское м."
                        },
                        new
                        {
                            Id = 6L,
                            CompanyId = 2L,
                            Name = "Сыморьяхское м."
                        },
                        new
                        {
                            Id = 7L,
                            CompanyId = 4L,
                            Name = "Толумское м."
                        },
                        new
                        {
                            Id = 8L,
                            CompanyId = 4L,
                            Name = "Ловинское м."
                        });
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyId = 2L,
                            Name = "ЦДНГ-1"
                        },
                        new
                        {
                            Id = 2L,
                            CompanyId = 2L,
                            Name = "ЦДНГ-2"
                        },
                        new
                        {
                            Id = 3L,
                            CompanyId = 1L,
                            Name = "ЦДНГ-10"
                        },
                        new
                        {
                            Id = 4L,
                            CompanyId = 1L,
                            Name = "ЦДНГ-11"
                        },
                        new
                        {
                            Id = 5L,
                            CompanyId = 3L,
                            Name = "ЦДНГ-1"
                        },
                        new
                        {
                            Id = 6L,
                            CompanyId = 4L,
                            Name = "ЦДНГ-1"
                        });
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.Well", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Altitude");

                    b.Property<long>("CompanyId");

                    b.Property<long>("FieldId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("ShopId");

                    b.Property<long>("WellTypeId");

                    b.Property<long>("ZabF");

                    b.Property<long>("ZabI");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FieldId");

                    b.HasIndex("ShopId");

                    b.HasIndex("WellTypeId");

                    b.ToTable("Wells");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Altitude = 100L,
                            CompanyId = 1L,
                            FieldId = 1L,
                            Name = "10010",
                            ShopId = 3L,
                            WellTypeId = 1L,
                            ZabF = 1315L,
                            ZabI = 1300L
                        },
                        new
                        {
                            Id = 2L,
                            Altitude = 10L,
                            CompanyId = 1L,
                            FieldId = 1L,
                            Name = "100Р",
                            ShopId = 3L,
                            WellTypeId = 2L,
                            ZabF = 2002L,
                            ZabI = 1988L
                        });
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.WellType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("WellTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Нефтяная"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Нагнетательная"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Водозаборная"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Oil.Domain.Entity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Oil.Domain.Entity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Oil.Domain.Entity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Oil.Domain.Entity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.Field", b =>
                {
                    b.HasOne("Oil.Domain.Entity.Entities.Company", "Company")
                        .WithMany("Fields")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.Shop", b =>
                {
                    b.HasOne("Oil.Domain.Entity.Entities.Company", "Company")
                        .WithMany("Shops")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oil.Domain.Entity.Entities.Well", b =>
                {
                    b.HasOne("Oil.Domain.Entity.Entities.Company", "Company")
                        .WithMany("Wells")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Oil.Domain.Entity.Entities.Field", "Field")
                        .WithMany("Wells")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Oil.Domain.Entity.Entities.Shop", "Shop")
                        .WithMany("Wells")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Oil.Domain.Entity.Entities.WellType", "WellType")
                        .WithMany()
                        .HasForeignKey("WellTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
